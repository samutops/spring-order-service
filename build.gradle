plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'

description = 'Provides functionality for purchasing books.'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

ext {
	set('otelVersion', "2.18.1")
	set('springCloudVersion', "2025.0.0")
	set('testcontainersVersion', "1.19.0")
	set('okhttpVersion', "5.1.0")
	set('testKeycloakVersion', "3.7.0")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit'
	implementation 'org.springframework.retry:spring-retry'

	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly "io.opentelemetry.javaagent:opentelemetry-javaagent:${otelVersion}"
	runtimeOnly 'org.flywaydb:flyway-core'
	runtimeOnly 'org.flywaydb:flyway-database-postgresql'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'org.postgresql:r2dbc-postgresql'
	runtimeOnly 'org.springframework:spring-jdbc'

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.testcontainers:r2dbc'
	testImplementation 'com.squareup.okhttp3:mockwebserver'
	testImplementation 'org.springframework.cloud:spring-cloud-stream-test-binder'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation "com.github.dasniko:testcontainers-keycloak:${testKeycloakVersion}"

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
		mavenBom "com.squareup.okhttp3:okhttp-bom:${okhttpVersion}"
	}
}

bootBuildImage {
	imageName = "${project.name}"
	environment = [
			'BP_JVM_VERSION': '21.*'
	]

	docker {
		publishRegistry {
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
